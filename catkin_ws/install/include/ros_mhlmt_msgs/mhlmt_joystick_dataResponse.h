// Generated by gencpp from file ros_mhlmt_msgs/mhlmt_joystick_dataResponse.msg
// DO NOT EDIT!


#ifndef ROS_MHLMT_MSGS_MESSAGE_MHLMT_JOYSTICK_DATARESPONSE_H
#define ROS_MHLMT_MSGS_MESSAGE_MHLMT_JOYSTICK_DATARESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <sensor_msgs/Joy.h>

namespace ros_mhlmt_msgs
{
template <class ContainerAllocator>
struct mhlmt_joystick_dataResponse_
{
  typedef mhlmt_joystick_dataResponse_<ContainerAllocator> Type;

  mhlmt_joystick_dataResponse_()
    : state(false)
    , joystick_data()  {
    }
  mhlmt_joystick_dataResponse_(const ContainerAllocator& _alloc)
    : state(false)
    , joystick_data(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _state_type;
  _state_type state;

   typedef  ::sensor_msgs::Joy_<ContainerAllocator>  _joystick_data_type;
  _joystick_data_type joystick_data;





  typedef boost::shared_ptr< ::ros_mhlmt_msgs::mhlmt_joystick_dataResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_mhlmt_msgs::mhlmt_joystick_dataResponse_<ContainerAllocator> const> ConstPtr;

}; // struct mhlmt_joystick_dataResponse_

typedef ::ros_mhlmt_msgs::mhlmt_joystick_dataResponse_<std::allocator<void> > mhlmt_joystick_dataResponse;

typedef boost::shared_ptr< ::ros_mhlmt_msgs::mhlmt_joystick_dataResponse > mhlmt_joystick_dataResponsePtr;
typedef boost::shared_ptr< ::ros_mhlmt_msgs::mhlmt_joystick_dataResponse const> mhlmt_joystick_dataResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_mhlmt_msgs::mhlmt_joystick_dataResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_mhlmt_msgs::mhlmt_joystick_dataResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_mhlmt_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/melodic/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ros_mhlmt_msgs::mhlmt_joystick_dataResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_mhlmt_msgs::mhlmt_joystick_dataResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_mhlmt_msgs::mhlmt_joystick_dataResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_mhlmt_msgs::mhlmt_joystick_dataResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_mhlmt_msgs::mhlmt_joystick_dataResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_mhlmt_msgs::mhlmt_joystick_dataResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_mhlmt_msgs::mhlmt_joystick_dataResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "652ab8bbc8565d5fc36d35c89a957203";
  }

  static const char* value(const ::ros_mhlmt_msgs::mhlmt_joystick_dataResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x652ab8bbc8565d5fULL;
  static const uint64_t static_value2 = 0xc36d35c89a957203ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_mhlmt_msgs::mhlmt_joystick_dataResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_mhlmt_msgs/mhlmt_joystick_dataResponse";
  }

  static const char* value(const ::ros_mhlmt_msgs::mhlmt_joystick_dataResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_mhlmt_msgs::mhlmt_joystick_dataResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool state\n\
sensor_msgs/Joy joystick_data\n\
\n\
\n\
================================================================================\n\
MSG: sensor_msgs/Joy\n\
# Reports the state of a joysticks axes and buttons.\n\
Header header           # timestamp in the header is the time the data is received from the joystick\n\
float32[] axes          # the axes measurements from a joystick\n\
int32[] buttons         # the buttons measurements from a joystick \n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::ros_mhlmt_msgs::mhlmt_joystick_dataResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_mhlmt_msgs::mhlmt_joystick_dataResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
      stream.next(m.joystick_data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mhlmt_joystick_dataResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_mhlmt_msgs::mhlmt_joystick_dataResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_mhlmt_msgs::mhlmt_joystick_dataResponse_<ContainerAllocator>& v)
  {
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
    s << indent << "joystick_data: ";
    s << std::endl;
    Printer< ::sensor_msgs::Joy_<ContainerAllocator> >::stream(s, indent + "  ", v.joystick_data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_MHLMT_MSGS_MESSAGE_MHLMT_JOYSTICK_DATARESPONSE_H
